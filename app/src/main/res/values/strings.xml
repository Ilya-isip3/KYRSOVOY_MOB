<resources>
    <string name="app_name">Учебник C#</string>
    <string name="teoriya1">Переменные в C# - это именованные контейнеры, которые хранят данные. В C# переменные должны быть объявлены с указанием их типа данных. Вот некоторые основные типы данных в C#:

        \n\n\t\t1. Целочисленные типы данных:
- int: 32-битное знаковое целое число. Диапазон значений от -2,147,483,648 до 2,147,483,647.
- long: 64-битное знаковое целое число.
- short: 16-битное целое число.

        \n\n\t\t2. Типы данных с плавающей запятой:
- float: 32-битное число с плавающей запятой.
- double: 64-битное число с плавающей запятой.

        \n\n\t\t3. Логический тип данных:
- bool: логический тип данных, который может содержать значение true или false.

        \n\n\t\t4. Символьный тип данных:
- char: одиночный символ Unicode.


        \n\n\t\t5. Тип данных строка:
- string: строковый тип данных, который представляет текстовую информацию.


        \n\n\t\t6. Другие типы данных:
- decimal: 128-битное десятичное число.
- byte: 8-битное беззнаковое целое число.

\n\n\t\tПример объявления переменной в C#:
    \n\t\tC# также поддерживает неявное и явное преобразование типов данных. Неявное преобразование происходит автоматически, если типы данных совместимы. Явное преобразование требует явного указания типа данных.</string>
    <string name="teoriya2">В C# для ввода и вывода данных используются различные методы и классы. Вот несколько основных способов ввода и вывода данных в C#:

    \n\n\t\t1. Console.ReadLine(): Этот метод позволяет пользователю ввести строку с клавиатуры и сохранить ее в переменную.
    \n\n\t\t2. Console.WriteLine(): Этот метод выводит текст или значение переменной на консоль.
    \n\n\t\t3. Console.Write(): Этот метод выводит текст или значение переменной на консоль без перевода строки
    \n\n\t\t4. Convert.ToInt32(): Данный метод используется для преобразования введенной строки в целочисленное значение.
    \n\n\t\tЭто лишь базовые примеры ввода и вывода данных в C#. Есть и другие методы и классы, которые могут быть использованы в зависимости от конкретной ситуации.</string>
    <string name="teoriya3">Операторы в C# - это символы, которые обеспечивают выполнение операций над переменными и значениями. Выражения в C# состоят из операторов, операндов и выражений. Давайте рассмотрим некоторые основные операторы и выражения в C#:
        \n\n\t\t1. Арифметические операторы:
        \n + (сложение)
        \n - (вычитание)
        \n * (умножение)
        \n / (деление)
        \n % (остаток от деления)
        \n\n\t\t2. Операторы сравнения:\n\t\t
        \n == (равенство)
        \n != (неравенство)
        \n >, &lt; (больше, меньше)
        \n >=, &lt;= (больше или равно, меньше или равно)
        \n\n\t\t3. Логические операторы:
        \n &amp;&amp; (логическое И)
        \n || (логическое ИЛИ)
        \n ! (логическое НЕ)
        \n\n\t\t4. Операторы присваивания:
        \n = (присваивание)
        \n +=, -=, *=, /= (присваивание с операцией)
        \n\nВ языке C# также существуют другие операторы, такие как битовые операторы, операторы приведения типов и другие. Операторы используются для выполнения различных операций и контроля хода выполнения программы.
    </string>
    <string name="teoriya4">Условные операторы в C# позволяют выполнять определенные действия в зависимости от выполнения определенных условий. В языке программирования C# наиболее часто используются операторы if-else и switch-case. Давай посмотрим на них подробнее:

        \n\n\t\t### Оператор if-else:
        \nОператор if в C# используется для проверки условия. Если условие истинно (true), то выполняется определенный блок кода. В противном случае, можно использовать оператор else, который выполняет другой блок кода.

        \n\n\t\t### Оператор switch-case:
        \nОператор switch в C# позволяет проверить значение переменной на соответствие различным вариантам значений (case). Если значение переменной совпадает с одним из вариантов, выполняется соответствующий блок кода. Каждый блок кода должен завершаться оператором break.</string>
    <string name="teoriya5">В C# существует несколько типов циклов: for, while, и do-while.

    \n\n\t\t1. Цикл for
\nЦикл for используется для выполнения повторяющихся операций определенное количество раз.
    \n\n\t\t2. Цикл while
\nЦикл while выполняет тело цикла, пока условие верно.
    \n\n\t\t3. Цикл do-while
\nЦикл do-while похож на цикл while, но он гарантирует выполнение тела цикла хотя бы один раз, даже если условие неверно.
    \n\n\t\tЦиклы позволяют уменьшить дублирование кода и повторять операции на протяжении определенного количества раз или пока выполняется определенное условие.</string>
    <string name="teoriya6">Массивы и коллекции в C# - это структуры данных, которые позволяют хранить и управлять коллекциями элементов. Вот краткое описание каждого из них:

\n\n\t\tМассивы:
\n Массивы в C# являются упорядоченными коллекциями элементов одного типа данных.
\n Размер массива определяется при его создании и не может быть изменен во время выполнения программы.
\n Доступ к элементам массива осуществляется по их индексам, которые начинаются с 0.
\n Для объявления массива в C# используется следующий синтаксис: тип_данных[] имя_массива = new тип_данных[размер];
    \n\n\t\tКоллекции:
\n Коллекции в C# представляют собой группу связанных объектов, которые могут хранить элементы различных типов данных.
\n Коллекции более гибкие по сравнению с массивами, так как их размер может быть изменен во время выполнения программы.
\n В стандартной библиотеке C# есть множество типов коллекций, таких как List, Dictionary, Queue, Stack и т.д., которые предоставляют различные способы организации и управления данными.
    \n\n\t\tОба массивы и коллекции могут использоваться для хранения и управления большим количеством данных в C#. Выбор между массивами и коллекциями зависит от конкретной задачи и требований к производительности и гибкости структуры данных.</string>
    <string name="teoriya7">В C# методы и функции являются основными строительными блоками программы.

\n\n\t\tМетоды в C# - это поименованный блок кода, который может быть вызван из других частей программы. Методы могут содержать логику, операторы, объявления переменных, а также вызывать другие методы или функции.

\n\n\t\tФункции в C# - это специальный тип методов, которые возвращают значение после выполнения определенной операции. Функции обычно имеют возвращаемый тип данных, указанный в сигнатуре метода.
        \n\n\t\tМетоды и функции позволяют улучшить организацию кода, повторно использовать блоки логики, а также делать программу более читаемой и модульной. Они также обеспечивают возможность работы с аргументами и возвращаемыми значениями, что делает их очень полезными для разработки приложений на C#.</string>
    <string name="teoriya8">Интерфейсы и абстрактные классы - это два механизма, которые позволяют реализовывать абстракцию в программировании на C#.

\n\n\t\tИнтерфейсы - это контракт, определяющий набор методов и свойств, которые класс должен реализовать. Интерфейс не содержит конкретной реализации методов, только их сигнатуры. Классы могут реализовывать один или несколько интерфейсов. Для объявления интерфейса в C# используется ключевое слово interface.
    \n\n\t\tАбстрактный класс - это класс, который может содержать реализацию методов, а также абстрактные методы, не имеющие тела. Абстрактный класс может быть унаследован другими классами, которые должны реализовать абстрактные методы. Для объявления абстрактного класса в C# используется ключевое слово abstract.
    \n\n\t\tКлючевые различия между интерфейсами и абстрактными классами:
1. Класс может наследовать только один класс, но реализовывать множество интерфейсов.
2. Абстрактный класс может содержать обычные методы и свойства, в то время как интерфейс не может.
3. Абстрактный класс может содержать переменные-члены, а интерфейс - нет.
4. Абстрактный класс может использоваться для создания общей логики, в то время как интерфейсы используются для определения сходства между различными классами.

\n\n\t\tИнтерфейсы и абстрактные классы широко используются в объектно-ориентированном программировании для построения гибкой и расширяемой структуры программы</string>
    <string name="OOPch1">ООП, или объектно-ориентированное программирование, является методологией программирования, основанной на концепции объектов, которые являются основными строительными блоками программы. Основные принципы ООП включают в себя:

\n\n\t\t1. Инкапсуляция: объекты могут содержать в себе данные (поля) и методы (функции), которые манипулируют этими данными. Инкапсуляция позволяет скрыть детали реализации объекта от пользователя, предоставляя только интерфейс взаимодействия с ним.

\n\n\t\t2. Наследование: объекты могут наследовать свойства и методы другого объекта, что позволяет создавать иерархии классов. Наследование облегчает повторное использование кода и позволяет создавать более универсальные и гибкие программы.

\n\n\t\t3. Полиморфизм: объекты могут вести себя по-разному в зависимости от контекста. Это позволяет использовать одинаковые методы для объектов разных классов и обеспечивает удобство работы с объектами внутри программы.

\n\n\t\tООП позволяет разбивать программу на небольшие блоки (объекты), что упрощает понимание и поддержку кода, а также способствует повышению его переиспользуемости и расширяемости. ООП используется во многих современных языках программирования, таких как Java, C++, Python, и другие.</string>
    <string name="OOPch2">В данном примере:

\n\n\t\t1. Применен принцип инкапсуляции: поля класса Person (name и age) доступны только через методы GetName(), SetName(), GetAge(), SetAge().
\n\t\t2. Применен принцип наследования: класс Student наследует от класса Person.
\n\t\t3. Применен принцип полиморфизма: интерфейс IPrintable позволяет использовать метод Print() как у экземпляра класса Printer.

\n\n\t\tЭтот код демонстрирует основные принципы ООП в C#</string>
</resources>